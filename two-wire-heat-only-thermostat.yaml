esphome:
  name: two-wire-heat-only-thermostat
  friendly_name: Two-Wire Heat Only Thermostat
  platformio_options:
    board_build.flash_mode: dio

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_AUDIO_BOARD_CUSTOM: "y"
      
psram:
  mode: quad # Please change this to quad for N8R2 and octal for N16R8
  speed: 80MHz

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "3AqSc7uwnuGXoZZIzPSsW34qRO3tuqVzK8RTO2reNUc="
  on_client_connected:
    then:
      - delay: 50ms
      - light.turn_on:
          id: onboard_status_led
          blue: 100%
          brightness: 40%
  on_client_disconnected:
    then:
      - delay: 50ms
      - light.turn_off: onboard_status_led

ota:
  - platform: esphome
    password: "ac7b4c54b17afe984657d69c5a3a23ba"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Two-Wire-Heat-Only-Thermostat"
    password: "ivIY0nX5wQTM"

captive_portal:

# Restart Button
button:
  - platform: restart
    name: "Thermostat Restart"
    id: restart_button

# Web Portal
web_server:
  port: 80

light:
  - platform: esp32_rmt_led_strip
    id: onboard_status_led
    rgb_order: GRB
    pin: GPIO48
    num_leds: 1
    rmt_channel: 0
    chipset: ws2812
    name: "On board status light"
    restore_mode: ALWAYS_ON
    effects:
      - pulse:

sensor:
  - platform: dht
    pin: GPIO4
    temperature:
      name: "Room Temperature"
      id: room_temp
    humidity:
      name: "Room Humidity"
    model: DHT11
    update_interval: 10s

i2c:
  sda: GPIO8
  scl: GPIO9
  scan: true

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x32"
    reset_pin: GPIO3
    address: 0x3C
    lambda: |-
      it.printf(4, 4, id(display_font), "%.1f°C", id(room_temp).state);
      it.printf(48, 4, id(display_font), "%.1f°C", id(heater_thermostat).current_temperature);

font:
  - file: "fonts/pixelmix.ttf"
    id: display_font
    size: 24

climate:
  - platform: thermostat
    name: "Heater Thermostat"
    id: heater_thermostat
    # icon: 'find some icon here'
    sensor: room_temp
    min_idle_time: 30s
    min_heating_off_time: 300s
    min_heating_run_time: 300s
    heat_action:
      - switch.turn_on: heater_relay
    idle_action:
      - switch.turn_off: heater_relay
    default_preset: Home
    preset:
      - name: Home
        default_target_temperature_low: 23.0
      - name: Sleep
        default_target_temperature_low: 16.0
    visual:
      min_temperature: 10
      max_temperature: 30
      temperature_step: 
        target_temperature: 0.5
        current_temperature: 0.1

switch:
  - platform: gpio
    pin: GPIO6
    id: heater_relay
    restore_mode: ALWAYS_OFF

binary_sensor:
  - platform: gpio
    pin: GPIO42
    name: "Heater On/Off Button"
    on_press:
      then:
        - climate.control:
            id: heater_thermostat
            mode: !lambda |-
              if (id(heater_thermostat).mode == climate::CLIMATE_MODE_OFF) {
                return climate::CLIMATE_MODE_HEAT;
              } else {
                return climate::CLIMATE_MODE_OFF;
              }

  - platform: gpio
    pin: GPIO38
    name: "Increase Temp Button"
    on_press:
      then:
        - climate.control:
            id: heater_thermostat
            target_temperature: !lambda |-
              return id(heater_thermostat).target_temperature + 0.5;

  - platform: gpio
    pin: GPIO45
    name: "Decrease Temp Button"
    on_press:
      then:
        - climate.control:
            id: heater_thermostat
            target_temperature: !lambda |-
              return id(heater_thermostat).target_temperature - 0.5;
  
  - platform: template
    id: heater_status
    name: "Heater Status"
    lambda: |-
      return id(heater_thermostat).current_temperature <= id(heater_thermostat).target_temperature && id(heater_thermostat).mode == climate::CLIMATE_MODE_HEAT;
    on_state:
      - if:
          condition:
            binary_sensor.is_on: heater_status
          then:
            - light.turn_on:
                id: onboard_status_led
                green: 100%  # Green when heater is on
          else:
            - light.turn_on:
                id: onboard_status_led
                blue: 100%  # Blue when heater is off
                brightness: 40%
