esphome:
  name: two-wire-heat-only-thermostat
  friendly_name: Two-Wire Heat Only Thermostat
  platformio_options:
    board_build.flash_mode: dio

  on_boot:
    - light.turn_on:
        id: onboard_status_led
        green: 0%
        red: 0%
        blue: 100%
        brightness: 14%

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_AUDIO_BOARD_CUSTOM: "y"
      
psram:
  mode: quad # Please change this to quad for N8R2 and octal for N16R8
  speed: 80MHz

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "3AqSc7uwnuGXoZZIzPSsW34qRO3tuqVzK8RTO2reNUc="

ota:
  - platform: esphome
    password: "ac7b4c54b17afe984657d69c5a3a23ba"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Two-Wire-Heat-Only-Thermostat"
    password: "ivIY0nX5wQTM"

captive_portal:

# Restart Button
button:
  - platform: restart
    name: "Thermostat Restart"
    id: restart_button

# Web Portal
web_server:
  port: 80

light:
  - platform: esp32_rmt_led_strip
    id: onboard_status_led
    rgb_order: GRB
    pin: GPIO48
    num_leds: 1
    rmt_channel: 0
    chipset: ws2812
    name: "On board status light"
    restore_mode: ALWAYS_ON
    effects:
      - pulse:
      - pulse:
          name: "Warning Pulse"
          min_brightness: 14%
          max_brightness: 40%

sensor:
# Include a temp sensor on the board.
  - platform: dht
    pin: GPIO4
    temperature:
      name: "Room Temperature"
      id: room_temp
    humidity:
      name: "Room Humidity"
    model: DHT11
    update_interval: 10s

# Use the existing temp sensor
  - platform: homeassistant
    entity_id: sensor.test_node_home_temperature
    id: living_room_temp
    name: "Living Room Temp"
    filters:
      - lambda: return (x - 32) / 1.8;

i2c:
  sda: GPIO8
  scl: GPIO9
  scan: true

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x32"
    reset_pin: GPIO3
    address: 0x3C
    lambda: |-
      // When using the onboard sensor
      float room_temp_f = (id(room_temp).state * 9.0 / 5.0) + 32.0;

      // When using another sensor on Home Assistant
      float living_room_temp_f = (id(living_room_temp).state * 9.0 / 5.0) + 32.0;
      float target_temp_f = (id(heater_thermostat).target_temperature * 9.0 / 5.0) + 32.0;

      // Change the variable to room_temp_f when using the onboard sensor
      it.printf(2, 4, id(medium_font), "%.1f", living_room_temp_f);
      it.printf(44, 8, id(large_font), "%.1f", target_temp_f);
      it.printf(105, 4, id(small_font), "%s", id(thermostat_mode_text).state.c_str());
      it.printf(105, 20, id(small_font), "%s", id(heater_status_text).state.c_str());

font:
  - file: "fonts/CaviarDreams.ttf"
    id: large_font
    size: 24
  - file: "fonts/CaviarDreams.ttf"
    id: medium_font
    size: 16
  - file: "fonts/pixelmix.ttf"
    id: small_font
    size: 8

climate:
  - platform: thermostat
    name: "Heater Thermostat"
    id: heater_thermostat
    # icon: 'find some icon here'
    # sensor: room_temp
    sensor: living_room_temp
    min_idle_time: 10s
    min_heating_off_time: 300s
    min_heating_run_time: 300s
    heat_action:
      - switch.turn_on: heater_relay
    idle_action:
      - switch.turn_off: heater_relay
    default_preset: Home
    preset:
      - name: Home
        default_target_temperature_low: 23.0
      - name: Sleep
        default_target_temperature_low: 16.0
    visual:
      min_temperature: 10
      max_temperature: 30
      temperature_step: 
        target_temperature: 0.5
        current_temperature: 0.1

switch:
  - platform: gpio
    pin: GPIO6
    name: "Heater Relay"
    internal: True
    id: heater_relay
    restore_mode: ALWAYS_OFF

######
# BINARY SENSORS
######

binary_sensor:
  # Thermostat Power Button (Mode: Heat or Off)
  - platform: gpio
    pin: 
      number: GPIO42
      mode: INPUT_PULLUP
    name: "Thermostat On Off Button"
    internal: True
    id: thermostat_button
    on_press:
      then:
        - climate.control:
            id: heater_thermostat
            mode: !lambda |-
              if (id(heater_thermostat).mode == climate::CLIMATE_MODE_OFF) {
                return climate::CLIMATE_MODE_HEAT;
              } else {
                return climate::CLIMATE_MODE_OFF;
              }
  
  - platform: template
    name: "Thermostat Status"
    id: thermostat_status
    lambda: |-
      return id(heater_thermostat).mode == climate::CLIMATE_MODE_HEAT;
    on_state:
      - light.turn_off: onboard_status_led
      - if:
          condition:
            binary_sensor.is_on: thermostat_status
          then:
            - if:
                condition:
                  binary_sensor.is_on: heater_status
                then:
                  - light.turn_on:
                      id: onboard_status_led
                      red: 55%
                      green: 30%  
                      blue: 15%
                      brightness: 80% # Bright orange when heater is on
                else:
                  - light.turn_on:
                      id: onboard_status_led
                      red: 50%
                      green: 50% # Yellow on stand by
                      blue: 0%  
                      brightness: 14%
                      effect: "Warning Pulse"
          else:
            - switch.turn_off: heater_relay
            - light.turn_on:
                id: onboard_status_led
                red: 50%
                green: 0% 
                blue: 100% # Blue when thermostat (and the heater) is off 
                brightness: 14%

  # Increase Target Temp
  - platform: gpio
    pin: 
      number: GPIO38
      mode: INPUT_PULLUP
    name: "Increase Temp Button"
    internal: True
    on_press:
      then:
        - climate.control:
            id: heater_thermostat
            target_temperature: !lambda |-
              return id(heater_thermostat).target_temperature + 0.5;

  # Decrease Target Temp
  - platform: gpio
    pin: 
      number: GPIO45
      mode: INPUT_PULLUP
    name: "Decrease Temp Button"
    internal: True
    on_press:
      then:
        - climate.control:
            id: heater_thermostat
            target_temperature: !lambda |-
              return id(heater_thermostat).target_temperature - 0.5;
  
  # Heater (Relay) On or Off
  - platform: template
    id: heater_status
    name: "Heater Status"
    lambda: |-
      return id(heater_relay).state;
    on_state:
      - light.turn_off: onboard_status_led
      - if:
          condition:
            binary_sensor.is_on: thermostat_status
          then:
            - if:
                condition:
                  binary_sensor.is_on: heater_status
                then:
                  - light.turn_on:
                      id: onboard_status_led
                      red: 55%
                      green: 30%  
                      blue: 15%
                      brightness: 80% # Bright orange when heater is on
                else:
                  - light.turn_on:
                      id: onboard_status_led
                      red: 50%
                      green: 50% # Yellow on stand by
                      blue: 0%  
                      brightness: 14%
                      effect: "Warning Pulse"
          else:
            - light.turn_on:
                id: onboard_status_led
                red: 50%
                green: 0% 
                blue: 100% # Blue when thermostat (and the heater) is off 
                brightness: 14%

  # Text sensor to Binary sensor
  - platform: template
    id: thermostat_mode_on
    internal: True
    name: "Thermostat Mode On"
    lambda: |-
      return id(thermostat_mode_text).state == "HEAT";


######
# TEXT SENSORS
######

text_sensor:
  - platform: template
    id: thermostat_mode_text
    name: "Thermostat Mode Text"
    internal: True
    update_interval: 1s
    lambda: |-
      if (id(heater_thermostat).mode == climate::CLIMATE_MODE_OFF) {
        return {"OFF"};
      } else {
        return {"HEAT"};
      }

  - platform: template
    id: heater_status_text
    name: "Heater Status Text"
    internal: True
    update_interval: 1s
    lambda: |-
      if (id(heater_thermostat).mode == climate::CLIMATE_MODE_HEAT) {
        if (id(heater_status).state) {
          return {"ON"};
        } else {
          return {"OFF"};
        }
      } else {
        return {""};
      }
